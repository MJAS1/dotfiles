filetype plugin indent on
let mapleader=","
syntax on

"------------------------------------------------------------------------------
" Setup plugins
"------------------------------------------------------------------------------

packadd! matchit

" Disable LSP features in ALE before loading plugins. LSP features are
" provided by coc.vim
let g:ale_disable_lsp = 1

call plug#begin('~/.vim/plugged')

Plug 'preservim/nerdtree'
Plug 'ryanoasis/vim-devicons'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'majutsushi/tagbar'
Plug 'bling/vim-airline'
Plug 'Lokaltog/vim-easymotion'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'junegunn/gv.vim'
Plug 'sodapopcan/vim-twiggy'
Plug 'morhetz/gruvbox'
Plug 'vim-ctrlspace/vim-ctrlspace'
Plug 'vimwiki/vimwiki'
Plug 'tools-life/taskwiki'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'christoomey/vim-tmux-navigator'
Plug 'dense-analysis/ale'
Plug 'dhruvasagar/vim-zoom'
Plug 'airblade/vim-gitgutter'

call plug#end()

"------------------------------------------------------------------------------
" Configure plugins
"------------------------------------------------------------------------------

" NERDTree
let g:NERDTreeChDirMode = 2

" Exit Vim if NERDTree is the only window left.
autocmd BufEnter *
\ if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() |
\     quit |
\ endif

" If another buffer tries to replace NERDTree, put it in the other window, and
" bring back NERDTree.
autocmd BufEnter *
\ if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
\     let buf=bufnr() |
\     buffer# |
\     execute "normal! \<C-W>w" |
\     execute 'buffer'.buf |
\ endif

" Tagbar
nmap <F8> :TagbarToggle<CR>
let g:tagbar_show_linenumbers = -1

" If another buffer tries to replace Tagbar, put it in the other window, and
" bring back Tagbar.
autocmd BufEnter *
\ if bufname('#') =~ 'Tagbar' && bufname('%') !~ 'Tagbar' && winnr('$') > 1 |
\     let buf=bufnr() |
\     buffer# |
\     execute "normal! \<C-W>w" |
\     execute 'buffer'.buf |
\ endif

" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" gruvbox
let g:gruvbox_transparent_bg = 1
let g:gruvbox_guisp_fallback = "bg"

" gv
" Don't fold diffs
autocmd FileType GV set foldlevel=1

"------------------------------------------------------------------------------
" Color scheme
"------------------------------------------------------------------------------

set background=dark
colorscheme gruvbox

" Highlight trailing spaces
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

"------------------------------------------------------------------------------
" Functions
"------------------------------------------------------------------------------

" From: http://vimcasts.org/episodes/tidying-whitespace/
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" From: https://www.reddit.com/r/vim/comments/74pw75/how_to_toggle_transparent_background_in_vim/
let t:is_transparent = 0
function! ToggleTransparentBackground()
    if t:is_transparent == 0
        hi Normal guibg=NONE ctermbg=NONE
        let t:is_transparent = 1
    else
        set background=dark
        let t:is_transparent = 0
    endif
endfunction

function! UpdateNerdTreeRoot()
    if g:NERDTree.IsOpen()
       :NERDTreeCWD
    endif
endfunction

"------------------------------------------------------------------------------
" Mappings
"------------------------------------------------------------------------------

" Autoclose braces
inoremap {      {}<Left>
inoremap {<CR>  {<CR>}<Esc>O
inoremap {{     {
inoremap {}     {}
inoremap {;<CR>     {<CR>};<ESC>O

" Autoclose parentheses
inoremap (      ()<Left>
inoremap (<CR>  (<CR>)<Esc>O
inoremap ((     (
inoremap ()     ()
inoremap (;     ();<Left><Left>

" Autoclose brackets
inoremap [      []<Left>
inoremap [<CR>  [<CR>]<Esc>O
inoremap [[     [
inoremap []     []

" Autoclose quotes
inoremap "      ""<Left>
inoremap ""     "
inoremap '      ''<Left>
inoremap ''     '

" Buffers
nnoremap <Tab> :bn <CR>
nnoremap <S-Tab> :bp <CR>

" Windows
noremap <silent> <C-h> :wincmd h<CR>
noremap <silent> <C-l> :wincmd l<CR>
inoremap <silent> <C-h> <Esc>:wincmd h<CR>
inoremap <silent> <C-l> <Esc>:wincmd l<CR>

" Better mappings for Finnish keyboard layout. [[, ]] etc. have to be mapped
" separately from the single character variants for them to work.
map ö [
map ä ]
map öö [[
map ää ]]
map öä []
map äö ][
map öÖ [{
map äÄ ]}
map Ö {
map Ä }

" Yank from current cursor position to the end of line.
nnoremap Y y$

" Make [[, ]], etc work even when '{' '}' is not in the first column
map [[ ?{<CR>w99[{
map ][ /}<CR>b99]}
map ]] j0[[%/{<CR>
map [] k$][%?}<CR>

" Use ctrl-s to save
noremap <c-s> :w<CR>
inoremap <c-s> <Esc>:w<CR>a

" Store relative line number jumps in the jumplist:
" https://stackoverflow.com/questions/29746445/is-there-a-vim-command-to-undo-the-last-motion-e-g-countj-or-ctrl-f/29746735#29746735
nnoremap <expr> k (v:count > 1 ? "m'" . v:count : '') . 'k'
nnoremap <expr> j (v:count > 1 ? "m'" . v:count : '') . 'j'

" NERDTree
map <C-n> :NERDTreeToggle<CR> :set relativenumber<CR> :call UpdateNerdTreeRoot()<CR>

" fzf
noremap <C-f> :Rg<CR>
noremap <C-p> :Files<CR>
noremap <C-b> :BLines<CR>
noremap <leader>l :Lines<CR>
noremap <leader>c :Commits<CR>

" easymotion: s to jump to a character
nmap s <Plug>(easymotion-s2)

" Fugitive
nnoremap <C-g><C-s> :Git<CR>
nnoremap <C-g><C-p> :Git add --patch %<CR>
nnoremap <C-g><C-o> :Git commit -v<CR>

" gv
nnoremap <C-g><C-g> :GV --all<CR>

" Twiggy
nnoremap <C-g><C-b> :Twiggy<CR>

" GitGutter
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)

inoremap jj <Esc>

nnoremap <silent> <leader>s :call <SID>StripTrailingWhitespaces()<CR>
nnoremap <leader>r :set relativenumber!<CR> :set number!<CR>
nnoremap <leader>q :qa<CR> :set number!<CR>
nnoremap <silent> <leader><space> :nohlsearch <CR>
nnoremap <C-x><C-t> :call ToggleTransparentBackground()<CR>

"------------------------------------------------------------------------------
" Commands
"------------------------------------------------------------------------------

command RV source $MYVIMRC

"------------------------------------------------------------------------------
" Options
"------------------------------------------------------------------------------

set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

set encoding=utf-8
set fileformats=unix,dos
set backspace=indent,eol,start
set history=200
set listchars=tab:▸\ ,eol:¬
set pastetoggle=<F2>
set shortmess-=S

set autoindent
set hidden
set incsearch
set autoread
set relativenumber
set wildmenu
set showcmd
set termguicolors
set hlsearch

" Fix background on some terminals
" See: https://sunaku.github.io/vim-256color-bce.html
set t_ut=

" Enable mouse usage
set mouse=a
set ttymouse=xterm2

" Use ripgrep for grep
if executable("rg")
    set grepprg=rg\ --vimgrep\ --no-heading
    set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

"------------------------------------------------------------------------------
" Autocommands
"------------------------------------------------------------------------------

" Highlight current line
augroup CursorLine
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END

augroup DirChange
    autocmd!
    autocmd DirChanged global call UpdateNerdTreeRoot()
augroup END

autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

" autoreload file for changes
autocmd CursorHold * checktime

"------------------------------------------------------------------------------
" coc configuration
"------------------------------------------------------------------------------

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
 "nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

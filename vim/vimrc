"------------------------------------------------------------------------------
" Setup plugins {{{
"------------------------------------------------------------------------------

packadd! matchit

" Disable LSP features in ALE before loading plugins. LSP features are
" provided by coc.vim
let g:ale_disable_lsp = 1

call plug#begin('~/.vim/plugged')

Plug 'AndrewRadev/switch.vim'
Plug 'Lokaltog/vim-easymotion'
Plug 'airblade/vim-gitgutter'
Plug 'bling/vim-airline'
Plug 'dense-analysis/ale'
Plug 'dhruvasagar/vim-zoom'
Plug 'honza/vim-snippets'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/gv.vim'
Plug 'junegunn/vim-peekaboo'
Plug 'morhetz/gruvbox'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'preservim/nerdtree'
Plug 'preservim/tagbar'
Plug 'ryanoasis/vim-devicons'
Plug 'sodapopcan/vim-twiggy'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'tools-life/taskwiki'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vim-ctrlspace/vim-ctrlspace'
Plug 'vimwiki/vimwiki'
Plug 'zivyangll/git-blame.vim'
Plug 'christoomey/vim-tmux-navigator'

call plug#end()

" }}}
"------------------------------------------------------------------------------
" Configurations {{{
"------------------------------------------------------------------------------

filetype plugin indent on
syntax on

let mapleader=","

" NERDTree
let g:NERDTreeChDirMode = 2
let g:NERDTreeShowLineNumbers = 1

" Tagbar
let g:tagbar_show_linenumbers = -1

" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" gruvbox
let g:gruvbox_transparent_bg = 1
let g:gruvbox_guisp_fallback = "bg"

" coc
" Prevent cursor from disappearing in some situations when CocList is closed
let g:coc_disable_transparent_cursor = 1

" ALE
" Assume ARM assembly by default when editing asm files
if executable("arm-none-eabi-gcc")
    let g:ale_asm_gcc_executable="arm-none-eabi-gcc"
endif
let g:ale_c_cc_executable='gcc'

" coc-snippets
let g:coc_snippet_next = '<c-j>'
let g:coc_snippet_prev = '<c-k>'

" vimwiki
" Do not associate all markdown files as vimwiki files
let g:vimwiki_global_ext = 0

" }}}
"------------------------------------------------------------------------------
" Color scheme {{{
"------------------------------------------------------------------------------

set background=dark
colorscheme gruvbox

" Highlight trailing spaces
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

" }}}
"------------------------------------------------------------------------------
" Functions {{{
"------------------------------------------------------------------------------

" From: http://vimcasts.org/episodes/tidying-whitespace/
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" From: https://www.reddit.com/r/vim/comments/74pw75/how_to_toggle_transparent_background_in_vim/
let t:is_transparent = 0
function! ToggleTransparentBackground()
    if t:is_transparent == 0
        hi Normal guibg=NONE ctermbg=NONE
        let t:is_transparent = 1
    else
        set background=dark
        let t:is_transparent = 0
    endif
endfunction

function! UpdateNerdTreeRoot()
    if g:NERDTree.IsOpen()
       :NERDTreeCWD
    endif
endfunction

" Exit Vim if NERDTree is the only window left.
function! QuitIfOnlyNerdTree()
    if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree()
        quit
    endif
endfunction

" If another buffer tries to replace the buffer defined in the argument, put
" it in the other window, and bring back the original buffer.
function DontAllowReplacing(bufferName)
    if bufname('#') =~ a:bufferName && bufname('%') !~ a:bufferName && winnr('$') > 1
        let buf=bufnr()
        buffer#
        execute "normal! \<C-W>w"
        execute 'buffer'.buf
    endif
endfunction

" coc
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" }}}
"------------------------------------------------------------------------------
" Mappings {{{
"------------------------------------------------------------------------------

inoremap jj <Esc>

" <C-i> usage for jumplist navigation doesn't work when <Tab> has been
" remapped since they are equivalent. Instead use Alt-i and Alt-o.
nnoremap <Esc>i <C-i>
nnoremap <Esc>o <C-o>

" Autoclose braces
inoremap {      {}<Left>
inoremap {<CR>  {<CR>}<Esc>O
inoremap {{     {
inoremap {}     {}
inoremap {;<CR>     {<CR>};<ESC>O

" Autoclose parentheses
inoremap (      ()<Left>
inoremap (<CR>  (<CR>)<Esc>O
inoremap ((     (
inoremap ()     ()
inoremap (;     ();<Left><Left>

" Autoclose brackets
inoremap [      []<Left>
inoremap [<CR>  [<CR>]<Esc>O
inoremap [[     [
inoremap []     []

" Autoclose quotes
inoremap "      ""<Left>
inoremap ""     "

" Buffers
nnoremap <Tab> :CtrlSpaceGoUp<CR>
nnoremap <S-Tab> :CtrlSpaceGoDown<CR>

" Windows
noremap <silent> <C-h> :wincmd h<CR>
noremap <silent> <C-j> :wincmd j<CR>
noremap <silent> <C-k> :wincmd k<CR>
noremap <silent> <C-l> :wincmd l<CR>

" Files
" Open files in the same directory as current file
" http://vimcasts.org/episodes/the-edit-command/
map <leader>ew :e <C-R>=expand("%:p:h") . "/" <CR>
map <leader>es :sp <C-R>=expand("%:p:h") . "/" <CR>
map <leader>ev :vsp <C-R>=expand("%:p:h") . "/" <CR>

" Folds
nnoremap <space><space> za

" Better mappings for Finnish keyboard layout. [[, ]] etc. have to be mapped
" separately from the single character variants for them to work.
map ö [
map ä ]
map öö [[
map ää ]]
map öä []
map äö ][
map öÖ [{
map äÄ ]}
map Ö {
map Ä }
map å `

" Yank from current cursor position to the end of line.
nnoremap Y y$

" Make [[, ]], etc work even when '{' '}' is not in the first column
map [[ ?{<CR>w99[{
map ][ /}<CR>b99]}
map ]] j0[[%/{<CR>
map [] k$][%?}<CR>

" Use ctrl-s to save
noremap <c-s> :w<CR>
inoremap <c-s> <Esc>:w<CR>a

nnoremap <silent> <leader>w :call <SID>StripTrailingWhitespaces()<CR>
nnoremap <leader>q :qa<CR> :set number!<CR>
nnoremap <silent> <leader><space> :nohlsearch <CR>
nnoremap <F5> :make<CR>
nnoremap <C-x><C-t> :call ToggleTransparentBackground()<CR>

" Store relative line number jumps in the jumplist:
" https://stackoverflow.com/questions/29746445/is-there-a-vim-command-to-undo-the-last-motion-e-g-countj-or-ctrl-f/29746735#29746735
nnoremap <expr> k (v:count > 1 ? "m'" . v:count : '') . 'k'
nnoremap <expr> j (v:count > 1 ? "m'" . v:count : '') . 'j'

" NERDTree
map <silent> <C-n> :NERDTreeToggle<CR>

" vim-unimpaired
" Pressing Alt in terminal sends escape, so in order to map Alt key, use <Esc>
nmap <Esc>k [e
nmap <Esc>j ]e
vmap <Esc>k [egv
vmap <Esc>j ]egv

" fzf
noremap <C-f> :Rg<CR>
noremap <C-p> :Files<CR>
noremap <C-b> :BLines<CR>
noremap <leader>l :Lines<CR>
noremap <leader>c :Commits<CR>

" easymotion: s to jump to a character
nmap s <Plug>(easymotion-s2)

" Fugitive
nnoremap <C-g><C-s> :Git<CR>
nnoremap <C-g><C-p> :Git add --patch %<CR>
nnoremap <C-g><C-o> :Git commit -v<CR>
nnoremap <C-g><C-l> :Git blame<CR>
nnoremap <C-g><C-w> :Gwrite<CR>
nnoremap <C-g><C-d> :Gdiffsplit!<CR>

" gv
nnoremap <C-g><C-g> :GV --all<CR>

" Twiggy
nnoremap <C-g><C-b> :Twiggy<CR>

" GitGutter
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)

" Git Blame
nnoremap <Leader>b :<C-u>call gitblame#echo()<CR>

" Tagbar
nmap <F8> :TagbarToggle<CR>

" Ale
nmap <silent> [g <Plug>(ale_previous_wrap)
nmap <silent> ]g <Plug>(ale_next_wrap)

" coc
" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
nnoremap <silent> K :call <SID>show_documentation()<CR>
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <leader>rn <Plug>(coc-rename)
nmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>ac  <Plug>(coc-codeaction)
nmap <leader>qf  <Plug>(coc-fix-current)
xmap <leader>f  <Plug>(coc-format-selected)
xmap <leader>a  <Plug>(coc-codeaction-selected)
" Use <tab> for select selections ranges, needs server support, like:
" coc-tsserver, coc-python nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)

"CocList
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" coc-snippets
imap <C-l> <Plug>(coc-snippets-expand)
vmap <C-j> <Plug>(coc-snippets-select)
imap <C-j> <Plug>(coc-snippets-expand-jump)
xmap <leader>x  <Plug>(coc-convert-snippet)

onoremap in :<c-u>normal! f(vi(<cr>

" }}}
"------------------------------------------------------------------------------
" Commands {{{
"------------------------------------------------------------------------------

command EV vsplit $MYVIMRC
command SV source $MYVIMRC
command Gpo Git push origin

" }}}
"------------------------------------------------------------------------------
" Options {{{
"------------------------------------------------------------------------------

set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

set encoding=utf-8
set fileformats=unix,dos
set backspace=indent,eol,start
set history=200
set listchars=tab:▸\ ,eol:¬
set pastetoggle=<F2>
set shortmess-=S
set cmdheight=2
set nrformats+=alpha
set updatetime=300
set signcolumn=yes

set autoindent
set hidden
set hlsearch
set incsearch
set autoread
set number
set relativenumber
set wildmenu
set showcmd
set termguicolors
set nobackup
set nowritebackup
set ignorecase
set smartcase

" Fix background on some terminals
" See: https://sunaku.github.io/vim-256color-bce.html
set t_ut=

" Enable mouse usage
set mouse=a
set ttymouse=xterm2

" coc.vim related options
set shortmess+=c

" Use ripgrep for grep
if executable("rg")
    set grepprg=rg\ --vimgrep\ --no-heading
    set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

" }}}
"------------------------------------------------------------------------------
" Autocommands {{{
"------------------------------------------------------------------------------

" Highlight current line
augroup CursorLine
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END

augroup DirChange
    autocmd!
    autocmd DirChanged global call UpdateNerdTreeRoot()
augroup END

augroup DontReplace
    autocmd!
    autocmd BufEnter * call DontAllowReplacing('NERD_tree_\d\+')
    autocmd BufEnter * call DontAllowReplacing('Tagbar')
augroup END

augroup Quit
    autocmd!
    autocmd BufEnter * call QuitIfOnlyNerdTree()
augroup END

augroup TrailingSpaces
    autocmd!
    autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
augroup END

" Fold vimrc
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END

" autoreload file for changes
augroup FileChanges
    autocmd!
    autocmd CursorHold * silent! checktime
augroup END

" gv
" Don't fold diffs
augroup Gv
    autocmd!
    autocmd FileType GV set foldlevel=1
augroup END

" coc
augroup coc
  autocmd!
  " Highlight symbol under cursor on CursorHold
  autocmd CursorHold * silent call CocActionAsync('highlight')
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" }}}
"------------------------------------------------------------------------------
" Misc {{{
"------------------------------------------------------------------------------

iabbrev rt return

" }}}
